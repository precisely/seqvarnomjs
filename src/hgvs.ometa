var elements = require('./elements');
var constants = require('./constants');
ometa HGVS {
  // This file describes an OMeta grammar for a subset of the HGVS
  // variant specification.  The subset is limited to is limited to those
  // rules that define sequence variants precisely.  It does not current
  // cover rules for translocations or conversions.

  // The basic structure of a HGVS sequence variant is:
  //    <ac>:<type>.<posedit>
  // where <ac> is a sequence accession, <type> determines the sequence
  // type and coordinate system ([cgmnpr]), and <posedit> is a
  // string/list/object of positions and edit operations.  A posedit is
  // itself composed of a position and an edit.


  ////////////////////////////////////////////////////////////////////////////
  // HGVS Sequence Variant

  hgvs_variant = g_variant | m_variant | c_variant | n_variant  | r_variant | p_variant,

  c_variant = accn:ac ':' 'c':type '.' (c_phased_alleles | c_trans_alleles | c_allele | c_posedit):variant
              -> elements.SequenceVariant({ac:ac, type:type, variant:variant}),
  g_variant = accn:ac ':' 'g':type '.' (g_phased_alleles | g_trans_alleles | g_allele | g_posedit):variant
              -> elements.SequenceVariant({ac:ac, type:type, variant:variant}),
  m_variant = accn:ac ':' 'm':type '.' m_posedit:variant -> elements.SequenceVariant({ac:ac, type:type, variant:variant}),
  n_variant = accn:ac ':' 'n':type '.' n_posedit:variant -> elements.SequenceVariant({ac:ac, type:type, variant:variant}),
  p_variant = accn:ac ':' 'p':type '.' p_posedit:variant -> elements.SequenceVariant({ac:ac, type:type, variant:variant}),
  r_variant = accn:ac ':' 'r':type '.' r_posedit:variant -> elements.SequenceVariant({ac:ac, type:type, variant:variant}),

  ////////////////////////////////////////////////////////////////////////////
  // HGVS Edit (without accession); e.g., c.76+3A>T
  // This family of rules exists primarily to aid parsing variants from
  // sources that use non-standard syntax. For example, some LOVD
  // installations provide variants like c.222A>T.

  c_typed_posedit = 'c':type '.' <c_phased_alleles | c_trans_alleles | c_allele | c_posedit>:variant
                    -> elements.SequenceVariant({ac:null, type:type, variant:variant}),
  g_typed_posedit = 'g':type '.' <g_phased_alleles | g_trans_alleles | g_allele | g_posedit>:variant
                    -> elements.SequenceVariant({ac:ac, type:type, variant:variant}),
  m_typed_posedit = 'm':type '.' m_posedit:variant -> elements.SequenceVariant({ac:null, type:type, variant:variant}),
  n_typed_posedit = 'n':type '.' n_posedit:variant -> elements.SequenceVariant({ac:null, type:type, variant:variant}),
  p_typed_posedit = 'p':type '.' p_posedit:variant -> elements.SequenceVariant({ac:null, type:type, variant:variant}),
  r_typed_posedit = 'r':type '.' r_posedit:variant -> elements.SequenceVariant({ac:null, type:type, variant:variant}),

  ////////////////////////////////////////////////////////////////////////////
  // HGVS Position -- e.g., NM_01234.5:c.22+6 (without an edit)
  // This is unofficial syntax

  hgvs_position     = g_hgvs_position | m_hgvs_position | c_hgvs_position | n_hgvs_position | r_hgvs_position | p_hgvs_position,

  c_hgvs_position = accn:ac ':' 'c':type '.' c_interval:pos -> elements.HGVSPosition({ac:ac, type:type, pos:post}),
  g_hgvs_position = accn:ac ':' 'g':type '.' g_interval:pos -> elements.HGVSPosition({ac:ac, type:type, pos:post}),
  m_hgvs_position = accn:ac ':' 'm':type '.' m_interval:pos -> elements.HGVSPosition({ac:ac, type:type, pos:post}),
  n_hgvs_position = accn:ac ':' 'n':type '.' n_interval:pos -> elements.HGVSPosition({ac:ac, type:type, pos:post}),
  p_hgvs_position = accn:ac ':' 'p':type '.' p_interval:pos -> elements.HGVSPosition({ac:ac, type:type, pos:post}),
  r_hgvs_position = accn:ac ':' 'r':type '.' r_interval:pos -> elements.HGVSPosition({ac:ac, type:type, pos:post}),

  ////////////////////////////////////////////////////////////////////////////
  // Allele - [edit;edit;edit] edits are in cis

  c_posedit_list = (c_posedit:edit -> [edit]) |
                   (c_posedit_list:list ';' c_posedit:edit -> list+[edit]),
  g_posedit_list = (g_posedit:edit -> [edit]) |
                   (g_posedit_list:list ';' g_posedit:edit -> list+[edit]),
  c_allele = '[' c_posedit_list:edits ']' -> elements.Allele({edits:edits}),
  g_allele = '[' g_posedit_list:edits ']' -> elements.Allele({edits:edits}),

  ////////////////////////////////////////////////////////////////////////////
  // Transalleles - allele;allele;allele... edits are in trans

  c_trans_alleles = c_allele:allele1 ';'
                   (c_allele:allele2 -> elements.TransAlleles({alleles:[allele1,allele2]}))
                 | (c_trans_alleles:trans_alleles -> trans_alleles.alleles.push(allele1)),
  g_trans_alleles = g_allele:allele1 ';'
                   (g_allele:allele2 -> elements.TransAlleles({alleles:[allele1,allele2]}))
                 | (g_trans_alleles:trans_alleles -> trans_alleles.alleles.push(allele1)),

  ////////////////////////////////////////////////////////////////////////////
  // PhasedAlleles - trans or cis alleles

  c_phased_alleles = c_trans_alleles | c_allele,
  g_phased_alleles = g_trans_alleles | g_allele,

  ////////////////////////////////////////////////////////////////////////////
  // UnphasedAlleles - phased(;)phased(;)phased...

  c_unphased_alleles = c_phased_alleles:allele1 '(;)'
                      (c_phased_alleles:allele2 -> elements.UnphasedAlleles({alleles:[allele1,allele2]}))
                    | (c_unphased_alleles:unphased -> unphased.alleles.push(allele1)),
  c_unphased_alleles = g_phased_alleles:allele1 '(;)'
                      (g_phased_alleles:allele2 -> elements.UnphasedAlleles({alleles:[allele1,allele2]}))
                    | (g_unphased_alleles:unphased -> unphased.alleles.push(allele1)),

  ////////////////////////////////////////////////////////////////////////////
  // PosEdits -- position + edit objects

  c_posedit = c_interval:pos dna_edit:edit -> elements.PosEdit({pos:pos,edit:edit}),
  g_posedit = g_interval:pos dna_edit:edit -> elements.PosEdit({pos:pos,edit:edit}),
  m_posedit = m_interval:pos dna_edit:edit -> elements.PosEdit({pos:pos,edit:edit}),
  n_posedit = n_interval:pos dna_edit:edit -> elements.PosEdit({pos:pos,edit:edit}),
  r_posedit = (r_interval:pos rna_edit:edit -> elements.PosEdit({pos:pos,edit:edit}))
    | ('(' r_interval:pos rna_edit:edit ')' -> elements.PosEdit({pos:pos,edit:edit})),

  p_posedit   = (p_interval:pos pro_edit:edit -> elements.PosEdit({pos:pos,edit:edit}))
    | ('(' p_interval:pos pro_edit:edit ')' -> elements.PosEdit({pos:pos,edit:edit}))
    | p_posedit_special,
  p_posedit_special =
        '=':x -> elements.PosEdit({pos:null, edit:x, uncertain:false})
    | '(' '=':x ')' -> elements.PosEdit({pos:null, edit:x, uncertain:true})
    | '0':x '?' -> elements.PosEdit({pos:null, edit:x, uncertain:true})
    | '0':x -> elements.PosEdit({pos:null, edit:x, uncertain:false})
    | '?':x -> null,


  ////////////////////////////////////////////////////////////////////////////
  // Edits -- sequence-specific operations at a position
  // subst, delins, del, and ins are represented using two classes, NARefAlt
  // and AARefAlt.  See edit.py for the meaning of the ref and alt instance
  // variables.
  // "_mu" = "maybe uncertain"

  dna_edit_mu = dna_edit | '(' dna_edit:edit ')' -> edit.setUncertain(),
  dna_edit   = dna_ident | dna_subst | dna_delins | dna_ins | dna_del | dna_dup | dna_inv | dna_con | dna_copy,
  dna_ident  = <dna*>:ref '='           -> elements.NARefAlt({ref:ref,alt:ref}),
  dna_subst  = dna:ref '>' dna:alt      -> elements.NARefAlt({ref:ref,alt:alt}),
  dna_delins = 'del' (<num>|<dna*>):ref 'ins' <dna+>:alt  -> elements.NARefAlt({ref:ref,alt:ref}),
  dna_del    = 'del' (<num>|<dna*>):ref -> elements.NARefAlt({ref:ref,alt:null}),
  dna_ins    = 'ins' <dna+>:alt         -> elements.NARefAlt({ref:null,alt:ref}),
  dna_dup    = 'dup' <dna*>:ref         -> elements.Dup({ref:ref}),
  dna_inv    = 'inv' (<num>|<dna*>):ref -> elements.Inv({ref:null}),
  dna_con    = 'con' hgvs_position:pos  -> elements.Conv({from_ac:pos.ac, from_type:pos.type, from_pos:pos.pos}),
  dna_copy   = 'copy' num:n -> elements.NACopy({copy:n}),

  rna_edit_mu = rna_edit | '(' rna_edit:edit ')' -> edit.setUncertain(),
  rna_edit   = rna_ident | rna_subst | rna_delins | rna_ins | rna_del | rna_dup | rna_inv | rna_con,
  rna_ident  = <rna*>:ref '='                  -> elements.NARefAlt({ref:ref,alt:ref}),
  rna_subst  = rna:ref '>' rna:alt             -> elements.NARefAlt({ref:ref,alt:alt}),
  rna_delins = 'del' (<num>|<rna*>):ref 'ins' <rna+>:alt  -> elements.NARefAlt({ref:ref,alt:alt}),
  rna_del    = 'del' (<num>|<rna*>):ref        -> elements.NARefAlt({ref:ref,alt:null}),
  rna_ins    = 'ins' <rna+>:alt                -> elements.NARefAlt({ref:null,alt:alt}),
  rna_dup    = 'dup' <rna*>:ref                -> elements.Dup({ref:ref}),
  rna_inv    = 'inv' (<num>|<rna*>):ref        -> elements.Inv({ref:null}),
  rna_con    = 'con' hgvs_position:pos         -> elements.Conv({from_ac:pos.ac, from_type:pos.type, from_pos:pos.pos}),

  pro_edit_mu = pro_edit | '(' pro_edit:edit ')' -> edit.setUncertain(),
  pro_edit   = pro_fs | pro_ext | pro_subst | pro_delins | pro_ins | pro_del | pro_dup | pro_ident,
  pro_subst  = (aat13|'?'):alt                 -> elements.AASub({ref:'',alt:alt}),
  pro_delins = 'delins' aat13_seq:alt          -> elements.AASub({ref:'',alt:alt}),
  pro_del    = 'del'                           -> elements.AASub({ref:'',alt:alt}),
  pro_ins    = 'ins' aat13_seq:alt             -> elements.AASub({ref:null,alt:alt}),
  pro_dup    = 'dup'                           -> elements.Dup({ref:''}),
  pro_fs     = (aat13 | (-> '')):alt fs:length -> elements.AAFs({ref:'', alt:alt, length:length}),
  pro_ext    = aat13?:alt ext:ext              -> elements.AAExt({ref:'', alt:alt, aaterm:ext.aaterm, length:ext.length}),
  pro_ident  = '='                             -> elements.AARefAlt({ref:'',alt:''}),


  ////////////////////////////////////////////////////////////////////////////
  // Locations
  // Much of the complexity below is to handle the combinations of various
  // location syntax and uncertainty

  // potentially indefinite/uncertain intervals
  c_interval = def_c_interval | '(' def_c_interval:iv ')' -> iv.setUncertain(),
  g_interval = def_g_interval | '(' def_g_interval:iv ')' -> iv.setUncertain(),
  m_interval = def_m_interval | '(' def_m_interval:iv ')' -> iv.setUncertain(),
  n_interval = def_n_interval | '(' def_n_interval:iv ')' -> iv.setUncertain(),
  p_interval = def_p_interval | '(' def_p_interval:iv ')' -> iv.setUncertain(),
  r_interval = def_r_interval | '(' def_r_interval:iv ')' -> iv.setUncertain(),

  // definite intervals
  def_g_interval = (g_pos:start '_' g_pos:end -> elements.Interval({start:start, end:end})) | (g_pos:start -> elements.Interval({start:start,end:elements.deepcopy(start)})),
  def_m_interval = (m_pos:start '_' m_pos:end -> elements.Interval({start:start, end:end})) | (m_pos:start -> elements.Interval({start:start,end:elements.deepcopy(start)})),
  def_p_interval = (p_pos:start '_' p_pos:end -> elements.Interval({start:start, end:end})) | (p_pos:start -> elements.Interval({start:start,end:elements.deepcopy(start)})),
  def_r_interval = (r_pos:start '_' r_pos:end -> elements.Interval({start:start, end:end})) | (r_pos:start -> elements.Interval({start:start,end:elements.deepcopy(start)})),
  def_c_interval = (c_pos:start '_' c_pos:end -> elements.BaseInterval({start:start, end:end})) | (c_pos:start -> elements.BaseOffsetInterval({start:start,end:elements.deepcopy(start)})),
  def_n_interval = (n_pos:start '_' n_pos:end -> elements.BaseInterval({start:start, end:end})) | (n_pos:start -> elements.BaseOffsetInterval({start:start,end:elements.deepcopy(start)})),

  // positions
  c_pos = def_c_pos | '(' def_c_pos:pos ')' -> pos.setUncertain(),
  g_pos = def_g_pos | '(' def_g_pos:pos ')' -> pos.setUncertain(),
  m_pos = def_m_pos | '(' def_m_pos:pos ')' -> pos.setUncertain(),
  n_pos = def_n_pos | '(' def_n_pos:pos ')' -> pos.setUncertain(),
  p_pos = def_p_pos | '(' def_p_pos:pos ')' -> pos.setUncertain(),
  r_pos = def_r_pos | '(' def_r_pos:pos ')' -> pos.setUncertain(),

  // definite positions
  def_c_pos = base:b offset:o -> elements.BaseOffsetPosition({base:b,offset:o,datum:constants.CDS_START})
        | '*' num:b offset:o -> elements.BaseOffsetPosition({base:b,offset:o,datum:constants.CDS_END}),
  def_g_pos = (num|'?'->null):pos -> elements.SimplePosition(pos),
  def_m_pos = (num|'?'->null):pos -> elements.SimplePosition(pos),
  def_n_pos = base:b offset:o -> elements.BaseOffsetPosition({base:b,offset:o,datum:constants.SEQ_START}),
  def_p_pos = (term13|aa13):aa num:pos -> elements.AAPosition({base:pos,aa:aa_to_aa1(aa)}),
  def_r_pos = base:b offset:o -> elements.BaseOffsetPosition({base:b,offset:o,datum:constants.SEQ_START}),


  ////////////////////////////////////////////////////////////////////////////
  // Basic types
  // Amino acids may be referred to with 1 or 3 letters.  In the following
  // rules, '1' = 1-letter AA, '3' = 3-letter, '13' = 1 or 3, and 't' =
  // includes terminator codon.  '_seq' refers to a sequence of any of these.

  // AA fs/ext
  fs = 'fs' (aa13_fs | -> null):n -> n,
  ext = 'ext' (aa13_ext | -> Ext(null, null)):ext -> ext,
  aa13_fs = term13 fsext_offset:n -> n,
  aa13_ext = term13:aat fsext_offset:n -> Ext(aat, n)
          | (aa13 | (-> null)):aat nnum:n -> Ext(aat, n),
  fsext_offset = num|'?'| (-> null),

  // sequences of NA/AA
  dna_seq = <dna+>,
  rna_seq = <rna+>,
  aat13_seq = <aat3_seq> | <aat1_seq>,
  aat1_seq = <term1> | <aa1+ term1?>,
  aat3_seq = <term3> | <aa3+ term3?>,
  aa13_seq = <aa3_seq> | <aa1_seq>,
  aa1_seq = <aa1+>,
  aa3_seq = <aa3+>,

  // individual residues
  aa1 = ('A'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'K'|'L'|'M'|'N'|'P'|'Q'|'R'|'S'|'T'|'V'|'W'|'Y'|'B'|'Z'|'X'|'U'):x -> x,
  aa13 = aa3 | aa1,
  aa3 = 'Ala'|'Cys'|'Asp'|'Glu'|'Phe'|'Gly'|'His'|'Ile'|'Lys'|'Leu'|'Met'|'Asn'|'Pro'|'Gln'|'Arg'|'Ser'|'Thr'|'Val'|'Trp'|'Tyr' | 'Asx' | 'Glx' | 'Xaa' | 'Sec',
  aat1 = term1 | aa1,
  aat13 = aat3 | aat1,
  aat3 = term3 | aa3,
  dna = dna_iupac,
  dna_iupac = ('A'|'C'|'G'|'T'|'R'|'Y'|'M'|'K'|'W'|'S'|'B'|'D'|'H'|'V'|'N'|'a'|'c'|'g'|'t'|'r'|'y'|'m'|'k'|'w'|'s'|'b'|'d'|'h'|'v'|'n'):x -> x,
  na_iupac = ('A'|'C'|'G'|'T'|'U'|'R'|'Y'|'M'|'K'|'W'|'S'|'B'|'D'|'H'|'V'|'N'|'a'|'c'|'g'|'t'|'u'|'r'|'y'|'m'|'k'|'w'|'s'|'b'|'d'|'h'|'v'|'n'):x -> x,
  rna = rna_iupac,
  rna_iupac = ('A'|'C'|'G'|'U'|'R'|'Y'|'M'|'K'|'W'|'S'|'B'|'D'|'H'|'V'|'N'|'a'|'c'|'g'|'u'|'r'|'y'|'m'|'k'|'w'|'s'|'b'|'d'|'h'|'v'|'n'):x -> x,
  term1 = ('X'|'*'):x -> x,
  term13 = term3 | term1,
  term3 = 'Ter',

  // position primitives
  // TODO: #331: support uncertain (?) bases and offsets
  base = snum,
  nnum = <'-' num>:x -> parseInt(x),
  num = <digit+>:x -> parseInt(x),
  offset = snum | (-> 0),
  pm = ('-'|'+'):x -> x,
  snum = <pm? num>:x -> parseInt(x),
  letterOrDigit = <letter> | <digit>,

  // Accessions, possibly versioned. Should accept, e.g., NM_01234.5, LRG_01234_1p1
 accn = <letter letterOrDigit+ ('_' letterOrDigit+)? ('.' digit+)?>
}