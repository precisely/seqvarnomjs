var elements = require('./elements');
var constants = require('./constants');

var NARefAlt = elements.NARefAlt;
var Interval = elements.Interval;
var BaseOffsetInterval = elements.NARefAlt;
var SequenceVariant = elements.SequenceVariant;
var SequenceVariantPattern = elements.SequenceVariantPattern;
var BaseOffsetPosition = elements.BaseOffsetPosition;
var SimpleVariant = elements.SimpleVariant;
var TransVariant = elements.TransVariant;
var CisVariant = elements.CisVariant;
var UnphasedVariant = elements.UnphasedVariant;
var Inv = elements.Inv;
var Uncertain = elements.Uncertain;

ometa SVN {
  // This file describes an OMeta grammar for a subset of the HGVS
  // variant specification.  The subset is limited to is limited to those
  // rules that define sequence variants precisely.  It does not current
  // cover rules for translocations or conversions.

  // The basic structure of an HGVS sequence variant is:
  //    <ac>:<type>.<variant>
  // where <ac> is a sequence accession, <type> determines the sequence
  // type and coordinate system ([cgmnpr]), and <variant> is a
  // one of many kinds of variants, simpleVariant, cisVariant,
  // transVariant, unphasedVariant

  ////////////////////////////////////////////////////////////////////////////
  // SequenceVariant - an accession number, a type and a variant

  EOF = spaces end,

  svnVariant = (gSeqVariant | mSeqVariant | cSeqVariant | nSeqVariant  | rSeqVariant | pSeqVariant):v EOF -> v,

  cSeqVariant = accn:ac ':' 'c':type '.' (cUnphasedVariant | cTransVariant | cCisVariant | cSimpleVariant):variant
              -> new SequenceVariant({ac:ac, type:type, variant:variant}),
  gSeqVariant = accn:ac ':' 'g':type '.' (gUnphasedVariant | gTransVariant | gCisVariant | gSimpleVariant):variant
              -> new SequenceVariant({ac:ac, type:type, variant:variant}),
  mSeqVariant = accn:ac ':' 'm':type '.' mSimpleVariant:variant -> new SequenceVariant({ac:ac, type:type, variant:variant}),
  nSeqVariant = accn:ac ':' 'n':type '.' nSimpleVariant:variant -> new SequenceVariant({ac:ac, type:type, variant:variant}),
  pSeqVariant = accn:ac ':' 'p':type '.' pSimpleVariant:variant -> new SequenceVariant({ac:ac, type:type, variant:variant}),
  rSeqVariant = accn:ac ':' 'r':type '.' rSimpleVariant:variant -> new SequenceVariant({ac:ac, type:type, variant:variant}),

  ////////////////////////////////////////////////////////////////////////////
  // HGVS Edit (without accession); e.g., c.76+3A>T
  // This family of rules exists primarily to aid parsing variants from
  // sources that use non-standard syntax. For example, some LOVD
  // installations provide variants like c.222A>T.

  cTypedSimpleVariant = 'c':type '.' (cUnphasedVariant | cTransVariant | cCisVariant | cSimpleVariant):variant
                    -> new SequenceVariant({ac:null, type:type, variant:variant}),
  gTypedSimpleVariant = 'g':type '.' (gUnphasedVariant | gTransVariant | gCisVariant | gSimpleVariant):variant
                    -> new SequenceVariant({ac:ac, type:type, variant:variant}),
  mTypedSimpleVariant = 'm':type '.' mSimpleVariant:variant -> new SequenceVariant({ac:null, type:type, variant:variant}),
  nTypedSimpleVariant = 'n':type '.' nSimpleVariant:variant -> new SequenceVariant({ac:null, type:type, variant:variant}),
  pTypedSimpleVariant = 'p':type '.' pSimpleVariant:variant -> new SequenceVariant({ac:null, type:type, variant:variant}),
  rTypedSimpleVariant = 'r':type '.' rSimpleVariant:variant -> new SequenceVariant({ac:null, type:type, variant:variant}),

  ////////////////////////////////////////////////////////////////////////////
  // HGVS Position -- e.g., NM_01234.5:c.22+6 (without an edit)
  // This is unofficial syntax

  hgvsPosition     = gHgvsPosition | mHgvsPosition | cHgvsPosition | nHgvsPosition | rHgvsPosition | pHgvsPosition,

  cHgvsPosition = accn:ac ':' 'c':type '.' cInterval:pos -> new HGVSPosition({ac:ac, type:type, pos:post}),
  gHgvsPosition = accn:ac ':' 'g':type '.' gInterval:pos -> new HGVSPosition({ac:ac, type:type, pos:post}),
  mHgvsPosition = accn:ac ':' 'm':type '.' mInterval:pos -> new HGVSPosition({ac:ac, type:type, pos:post}),
  nHgvsPosition = accn:ac ':' 'n':type '.' nInterval:pos -> new HGVSPosition({ac:ac, type:type, pos:post}),
  pHgvsPosition = accn:ac ':' 'p':type '.' pInterval:pos -> new HGVSPosition({ac:ac, type:type, pos:post}),
  rHgvsPosition = accn:ac ':' 'r':type '.' rInterval:pos -> new HGVSPosition({ac:ac, type:type, pos:post}),

  ////////////////////////////////////////////////////////////////////////////
  // UnphasedVariant - phased(;)phased(;)phased...

  cUnphasedVariant = listOf(#cPhasedVariants, '(;)'):phasedVariants ?(phasedVariants.length>1) -> new UnphasedVariant({variants:phasedVariants}),
  gUnphasedVariant = listOf(#gPhasedVariants, '(;)'):phasedVariants ?(phasedVariants.length>1) -> new UnphasedVariant({variants:phasedVariants}),

  ////////////////////////////////////////////////////////////////////////////
  // PhasedVariants - trans or cis cisVariants

  cPhasedVariants = cTransVariant | cCisVariant,
  gPhasedVariants = gTransVariant | gCisVariant,

  ////////////////////////////////////////////////////////////////////////////
  // TransVariant - cisVariant;cisVariant;cisVariant... edits are in trans

  cTransVariant = listOf(#cCisVariant, ';'):cisVariants ?(cisVariants.length>1) -> new TransVariant({variants:cisVariants}),
  gTransVariant = listOf(#gCisVariant, ';'):cisVariants ?(cisVariants.length>1) -> new TransVariant({variants:cisVariants}),

  ////////////////////////////////////////////////////////////////////////////
  // CisVariant (aka allele) - [edit;edit;edit] edits are in cis

  cisBracketPattern :elt = '[' listOf(elt,';'):edits ']' -> new CisVariant({variants:edits}),

  cCisVariant = cisBracketPattern(#cSimpleVariant),
  gCisVariant = cisBracketPattern(#gSimpleVariant),

  ////////////////////////////////////////////////////////////////////////////
  // SimpleVariant a single position with an optional edit (ref=>alt change)
  //               simple variant with a null edit indicates the reference sequence was found
  cSimpleVariant = cInterval:pos dnaEdit:edit -> new SimpleVariant({pos:pos,edit:edit}),
  gSimpleVariant = gInterval:pos dnaEdit:edit -> new SimpleVariant({pos:pos,edit:edit}),
  mSimpleVariant = mInterval:pos dnaEdit:edit -> new SimpleVariant({pos:pos,edit:edit}),
  nSimpleVariant = nInterval:pos dnaEdit:edit -> new SimpleVariant({pos:pos,edit:edit}),
  rSimpleVariant = (rInterval:pos rnaEdit:edit -> new SimpleVariant({pos:pos,edit:edit}))
    | ('(' rInterval:pos rnaEdit:edit ')' -> new SimpleVariant({pos:pos,edit:edit})),

  pSimpleVariant   = (pInterval:pos proEdit:edit -> new SimpleVariant({pos:pos,edit:edit}))
    | ('(' pInterval:pos proEdit:edit ')' -> new SimpleVariant({pos:pos,edit:edit}))
    | pSimpleVariantSpecial,
  pSimpleVariantSpecial =
        '=':x -> new SimpleVariant({pos:null, edit:x, uncertain:false})
    | '(' '=':x ')' -> new SimpleVariant({pos:null, edit:x, uncertain:true})
    | '0':x '?' -> new SimpleVariant({pos:null, edit:x, uncertain:true})
    | '0':x -> new SimpleVariant({pos:null, edit:x, uncertain:false})
    | '?':x -> null,

  ////////////////////////////////////////////////////////////////////////////
  // Edits -- sequence-specific operations at a position
  // subst, delins, del, and ins are represented using two classes, NARefAlt
  // and AARefAlt.  See edit.py for the meaning of the ref and alt instance
  // variables.
  // "MU" = "maybe uncertain"

  dnaEditMU = dnaEdit | '(' dnaEdit:edit ')' -> edit.setUncertain(),
  dnaEdit   = dnaIdent | dnaSubst | dnaDelins | dnaIns | dnaDel | dnaDup | dnaInv | dnaCon | dnaCopy,
  dnaIdent  = <dna*>:ref '='           -> null,
  dnaSubst  = dna:ref '>' dna:alt      -> new NARefAlt({ref:ref,alt:alt}),
  dnaDelins = 'del' (<num>|<dna*>):ref 'ins' <dna+>:alt  -> null,
  dnaDel    = 'del' (<num>|<dna*>):ref -> new NARefAlt({ref:ref,alt:null}),
  dnaIns    = 'ins' <dna+>:alt         -> new NARefAlt({ref:null,alt:ref}),
  dnaDup    = 'dup' <dna*>:ref         -> new Dup({ref:ref}),
  dnaInv    = 'inv' (<num>|<dna*>):ref -> new Inv({ref:null}),
  dnaCon    = 'con' hgvsPosition:pos  -> new Conv({fromAc:pos.ac, fromType:pos.type, fromPos:pos.pos}),
  dnaCopy   = 'copy' num:n -> new NACopy({copy:n}),

  rnaEditMU = rnaEdit | '(' rnaEdit:edit ')' -> edit.setUncertain(),
  rnaEdit   = rnaIdent | rnaSubst | rnaDelins | rnaIns | rnaDel | rnaDup | rnaInv | rnaCon,
  rnaIdent  = <rna*>:ref '='                  -> new NARefAlt({ref:ref,alt:ref}),
  rnaSubst  = rna:ref '>' rna:alt             -> new NARefAlt({ref:ref,alt:alt}),
  rnaDelins = 'del' (<num>|<rna*>):ref 'ins' <rna+>:alt  -> new NARefAlt({ref:ref,alt:alt}),
  rnaDel    = 'del' (<num>|<rna*>):ref        -> new NARefAlt({ref:ref,alt:null}),
  rnaIns    = 'ins' <rna+>:alt                -> new NARefAlt({ref:null,alt:alt}),
  rnaDup    = 'dup' <rna*>:ref                -> new Dup({ref:ref}),
  rnaInv    = 'inv' (<num>|<rna*>):ref        -> new Inv({ref:null}),
  rnaCon    = 'con' hgvsPosition:pos         -> new Conv({fromAc:pos.ac, fromType:pos.type, fromPos:pos.pos}),

  proEditMU = proEdit | '(' proEdit:edit ')' -> edit.setUncertain(),
  proEdit   = proFs | proExt | proSubst | proDelins | proIns | proDel | proDup | proIdent,
  proSubst  = (aat13|'?'):alt                 -> new AASub({ref:'',alt:alt}),
  proDelins = 'delins' aat13Seq:alt          -> new AASub({ref:'',alt:alt}),
  proDel    = 'del'                           -> new AASub({ref:'',alt:alt}),
  proIns    = 'ins' aat13Seq:alt             -> new AASub({ref:null,alt:alt}),
  proDup    = 'dup'                           -> new Dup({ref:''}),
  proFs     = (aat13 | (-> '')):alt fs:length -> new AAFs({ref:'', alt:alt, length:length}),
  proExt    = aat13?:alt ext:ext              -> new AAExt({ref:'', alt:alt, aaterm:ext.aaterm, length:ext.length}),
  proIdent  = '='                             -> new AARefAlt({ref:'',alt:''}),


  ////////////////////////////////////////////////////////////////////////////
  // Locations
  // Much of the complexity below is to handle the combinations of various
  // location syntax and uncertainty

  // potentially indefinite/uncertain intervals
  cInterval = defCInterval | '(' defCInterval:iv ')' -> iv.setUncertain(),
  gInterval = defGInterval | '(' defGInterval:iv ')' -> iv.setUncertain(),
  mInterval = defMInterval | '(' defMInterval:iv ')' -> iv.setUncertain(),
  nInterval = defNInterval | '(' defNInterval:iv ')' -> iv.setUncertain(),
  pInterval = defPInterval | '(' defPInterval:iv ')' -> iv.setUncertain(),
  rInterval = defRInterval | '(' defRInterval:iv ')' -> iv.setUncertain(),

  // definite intervals
  defGInterval = (gPos:start '_' gPos:end -> new Interval({start:start, end:end})) | (gPos:start -> start),
  defMInterval = (mPos:start '_' mPos:end -> new Interval({start:start, end:end})) | (mPos:start -> start),
  defPInterval = (pPos:start '_' pPos:end -> new Interval({start:start, end:end})) | (pPos:start -> start),
  defRInterval = (rPos:start '_' rPos:end -> new Interval({start:start, end:end})) | (rPos:start -> start),
  defCInterval = (cPos:start '_' cPos:end -> new BaseInterval({start:start, end:end})) | (cPos:start -> start),
  defNInterval = (nPos:start '_' nPos:end -> new BaseInterval({start:start, end:end})) | (nPos:start -> start),

  // positions
  cPos = defCPos | '(' defCPos:pos ')' -> new Uncertain(pos),
  gPos = defGPos | '(' defGPos:pos ')' -> new Uncertain(pos),
  mPos = defMPos | '(' defMPos:pos ')' -> new Uncertain(pos),
  nPos = defNPos | '(' defNPos:pos ')' -> new Uncertain(pos),
  pPos = defPPos | '(' defPPos:pos ')' -> new Uncertain(pos),
  rPos = defRPos | '(' defRPos:pos ')' -> new Uncertain(pos),

  // definite positions
  defCPos = base:b offset:o -> new BaseOffsetPosition({base:b,offset:o,datum:constants.CDS_START})
        | '*' num:b offset:o -> new BaseOffsetPosition({base:b,offset:o,datum:constants.CDS_END}),
  defGPos = (num|'?'->null):pos -> pos,
  defMPos = (num|'?'->null):pos -> pos,
  defNPos = base:b offset:o -> new BaseOffsetPosition({base:b,offset:o,datum:constants.SEQ_START}),
  defPPos = (term13|aa13):aa num:pos -> new AAPosition({base:pos,aa:aaToAa1(aa)}),
  defRPos = base:b offset:o -> new BaseOffsetPosition({base:b,offset:o,datum:constants.SEQ_START}),


  ////////////////////////////////////////////////////////////////////////////
  // Basic types
  // Amino acids may be referred to with 1 or 3 letters.  In the following
  // rules, '1' = 1-letter AA, '3' = 3-letter, '13' = 1 or 3, and 't' =
  // includes terminator codon.  'Seq' refers to a sequence of any of these.

  // AA fs/ext
  fs = 'fs' (aa13Fs | -> null):n -> n,
  ext = 'ext' (aa13Ext | -> Ext(null, null)):ext -> ext,
  aa13Fs = term13 fsextOffset:n -> n,
  aa13Ext = term13:aat fsextOffset:n -> Ext(aat, n)
          | (aa13 | (-> null)):aat nnum:n -> Ext(aat, n),
  fsextOffset = num|'?'| (-> null),

  // sequences of NA/AA
  dnaSeq = <dna+>,
  rnaSeq = <rna+>,
  aat13Seq = <aat3Seq> | <aat1Seq>,
  aat1Seq = <term1> | <aa1+ term1?>,
  aat3Seq = <term3> | <aa3+ term3?>,
  aa13Seq = <aa3Seq> | <aa1Seq>,
  aa1Seq = <aa1+>,
  aa3Seq = <aa3+>,

  // individual residues
  aa1 = ('A'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'K'|'L'|'M'|'N'|'P'|'Q'|'R'|'S'|'T'|'V'|'W'|'Y'|'B'|'Z'|'X'|'U'):x -> x,
  aa13 = aa3 | aa1,
  aa3 = 'Ala'|'Cys'|'Asp'|'Glu'|'Phe'|'Gly'|'His'|'Ile'|'Lys'|'Leu'|'Met'|'Asn'|'Pro'|'Gln'|'Arg'|'Ser'|'Thr'|'Val'|'Trp'|'Tyr' | 'Asx' | 'Glx' | 'Xaa' | 'Sec',
  aat1 = term1 | aa1,
  aat13 = aat3 | aat1,
  aat3 = term3 | aa3,
  dna = dnaIupac,
  dnaIupac = ('A'|'C'|'G'|'T'|'R'|'Y'|'M'|'K'|'W'|'S'|'B'|'D'|'H'|'V'|'N'|'a'|'c'|'g'|'t'|'r'|'y'|'m'|'k'|'w'|'s'|'b'|'d'|'h'|'v'|'n'):x -> x,
  naIupac = ('A'|'C'|'G'|'T'|'U'|'R'|'Y'|'M'|'K'|'W'|'S'|'B'|'D'|'H'|'V'|'N'|'a'|'c'|'g'|'t'|'u'|'r'|'y'|'m'|'k'|'w'|'s'|'b'|'d'|'h'|'v'|'n'):x -> x,
  rna = rnaIupac,
  rnaIupac = ('A'|'C'|'G'|'U'|'R'|'Y'|'M'|'K'|'W'|'S'|'B'|'D'|'H'|'V'|'N'|'a'|'c'|'g'|'u'|'r'|'y'|'m'|'k'|'w'|'s'|'b'|'d'|'h'|'v'|'n'):x -> x,
  term1 = ('X'|'*'):x -> x,
  term13 = term3 | term1,
  term3 = 'Ter',

  // position primitives
  // TODO: #331: support uncertain (?) bases and offsets
  base = snum,
  nnum = <'-' num>:x -> parseInt(x),
  num = <digit+>:x -> parseInt(x),
  offset = snum | (-> 0),
  pm = ('-'|'+'):x -> x,
  snum = <pm? num>:x -> parseInt(x),
  letterOrDigit = <letter> | <digit>,

  // Accessions, possibly versioned. Should accept, e.g., NM_01234.5, LRG_01234_1p1
 accn = <letter letterOrDigit+ ('_' letterOrDigit+)? ('.' digit+)?>
}

module.exports = {
  SVN:SVN
};